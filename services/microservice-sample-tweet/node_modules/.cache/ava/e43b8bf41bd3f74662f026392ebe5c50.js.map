{"version":3,"sources":["test/tweets.js"],"names":["test","require","supertest","mongoose","express","bodyParser","MongoMemoryServer","console","error","router","model","Tweet","mongod","app","use","json","urlencoded","extended","user1Id","Types","ObjectId","user2Id","before","uri","getConnectionString","connect","useNewUrlParser","beforeEach","t","tweets","push","userId","content","save","context","afterEach","always","deleteMany","exec","after","stop","serial","res","get","is","status","body","length","_id","toString","target","deepEqual","post","send","true","delete","actual","find"],"mappings":"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","sourceRoot":"/home/cocomore/microservice-sample-integration/services/microservice-sample-tweet","sourcesContent":["const test = require('ava')\nconst supertest = require('supertest')\nconst mongoose = require('mongoose')\nconst express = require('express')\nconst bodyParser = require('body-parser')\nconst { MongoMemoryServer } = require('mongodb-memory-server')\n\nconsole.error = () => {}\nconst router = require('../controllers/v1/tweets.js')\nconst model = require('../models/tweet.js')\nconst Tweet = model.Tweet\n\nconst mongod = new MongoMemoryServer()\nconst app = express()\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: true }))\napp.use('/tweets', router)\n\nconst user1Id = new mongoose.Types.ObjectId()\nconst user2Id = new mongoose.Types.ObjectId()\n\ntest.before(async () => {\n  const uri = await mongod.getConnectionString()\n  mongoose.connect(uri, { useNewUrlParser: true })\n})\n\ntest.beforeEach(async t => {\n  let tweets = []\n  tweets.push(\n    await new Tweet({\n      userId: user1Id,\n      content: 'aaa'\n    }).save()\n  )\n  tweets.push(\n    await new Tweet({\n      userId: user1Id,\n      content: 'bbb'\n    }).save()\n  )\n  tweets.push(\n    await new Tweet({\n      userId: user2Id,\n      content: 'ccc'\n    }).save()\n  )\n  tweets.push(\n    await new Tweet({\n      userId: user2Id,\n      content: 'ddd'\n    }).save()\n  )\n  t.context.tweets = tweets\n})\n\ntest.afterEach.always(async () => {\n  await Tweet.deleteMany().exec()\n})\n\ntest.after(async () => {\n  await mongod.stop()\n})\n\n// GET /tweets\ntest.serial('get tweets', async t => {\n  const res = await supertest(app).get('/tweets')\n  t.is(res.status, 200)\n  t.is(res.body.length, 4)\n  t.is(res.body[0]._id, t.context.tweets[3]._id.toString())\n})\n\n// GET /tweets/:id\ntest.serial('get tweet', async t => {\n  const target = t.context.tweets[0]\n  const res = await supertest(app).get(`/tweets/${target._id}`)\n  t.is(res.status, 200)\n  t.is(res.body._id, target._id.toString())\n  t.is(res.body.userId, target.userId.toString())\n  t.is(res.body.content, target.content)\n})\n\ntest.serial('get tweet not found', async t => {\n  const res = await supertest(app).get(\n    `/tweets/${new mongoose.Types.ObjectId()}`\n  )\n  t.is(res.status, 404)\n  t.deepEqual(res.body, { error: 'NotFound' })\n})\n\ntest.serial('get tweet id is invalid', async t => {\n  const res = await supertest(app).get('/tweets/invalid')\n  t.is(res.status, 400)\n  t.deepEqual(res.body, { error: 'BadRequest' })\n})\n\n// POST /tweets\ntest.serial('create tweet', async t => {\n  const content = 'xxx'\n  const res = await supertest(app)\n    .post('/tweets')\n    .send({ userId: user1Id.toString(), content: content })\n  t.is(res.status, 200)\n  t.true('_id' in res.body)\n  t.is(res.body.content, content)\n})\n\ntest.serial('create tweet no userId', async t => {\n  const content = 'xxx'\n  const res = await supertest(app)\n    .post('/tweets')\n    .send({ content: content })\n  t.is(res.status, 400)\n  t.deepEqual(res.body, { error: 'BadRequest' })\n})\n\ntest.serial('create tweet no content', async t => {\n  const res = await supertest(app)\n    .post('/tweets')\n    .send({ userId: user1Id.toString() })\n  t.is(res.status, 400)\n  t.deepEqual(res.body, { error: 'BadRequest' })\n})\n\ntest.serial('create tweet content is empty', async t => {\n  const res = await supertest(app)\n    .post('/tweets')\n    .send({ userId: user1Id.toString(), content: '' })\n  t.is(res.status, 400)\n  t.deepEqual(res.body, { error: 'BadRequest' })\n})\n\ntest.serial('create tweet content is too long', async t => {\n  const res = await supertest(app)\n    .post('/tweets')\n    .send({ userId: user1Id.toString(), content: 'a' * 141 })\n  t.is(res.status, 400)\n  t.deepEqual(res.body, { error: 'BadRequest' })\n})\n\n// DELETE /tweets/:id\ntest.serial('delete tweet', async t => {\n  const res = await supertest(app).delete(`/tweets/${t.context.tweets[0]._id}`)\n  t.is(res.status, 200)\n  const actual = await Tweet.find()\n  t.is(actual.length, 3)\n})\n\ntest.serial('delete tweet not found', async t => {\n  const res = await supertest(app).delete(\n    `/tweets/${new mongoose.Types.ObjectId()}`\n  )\n  t.is(res.status, 404)\n  t.deepEqual(res.body, { error: 'NotFound' })\n})\n\ntest.serial('delete tweet id is invalid', async t => {\n  const res = await supertest(app).delete('/tweets/invalid')\n  t.is(res.status, 400)\n  t.deepEqual(res.body, { error: 'BadRequest' })\n})\n"]}