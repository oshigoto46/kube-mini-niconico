{"version":3,"sources":["test/timeline.js"],"names":["test","require","supertest","mongoose","express","bodyParser","MongoMemoryServer","console","error","router","model","Tweet","mongod","app","use","json","urlencoded","extended","user1Id","Types","ObjectId","user2Id","user3Id","before","uri","getConnectionString","connect","useNewUrlParser","beforeEach","t","tweets","push","userId","content","save","context","afterEach","always","deleteMany","exec","after","stop","serial","res","post","send","toString","is","status","body","length"],"mappings":"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","sourceRoot":"/home/cocomore/microservice-sample-integration/services/microservice-sample-tweet","sourcesContent":["const test = require('ava')\nconst supertest = require('supertest')\nconst mongoose = require('mongoose')\nconst express = require('express')\nconst bodyParser = require('body-parser')\nconst { MongoMemoryServer } = require('mongodb-memory-server')\n\nconsole.error = () => {}\nconst router = require('../controllers/v1/timeline.js')\nconst model = require('../models/tweet.js')\nconst Tweet = model.Tweet\n\nconst mongod = new MongoMemoryServer()\nconst app = express()\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: true }))\napp.use('/timeline', router)\n\nconst user1Id = new mongoose.Types.ObjectId()\nconst user2Id = new mongoose.Types.ObjectId()\nconst user3Id = new mongoose.Types.ObjectId()\n\ntest.before(async () => {\n  const uri = await mongod.getConnectionString()\n  mongoose.connect(uri, { useNewUrlParser: true })\n})\n\ntest.beforeEach(async t => {\n  let tweets = []\n  tweets.push(await new Tweet({ userId: user1Id, content: 'aaa' }).save())\n  tweets.push(await new Tweet({ userId: user1Id, content: 'bbb' }).save())\n  tweets.push(await new Tweet({ userId: user2Id, content: 'ccc' }).save())\n  tweets.push(await new Tweet({ userId: user2Id, content: 'ddd' }).save())\n  tweets.push(await new Tweet({ userId: user3Id, content: 'eee' }).save())\n  t.context.tweets = tweets\n})\n\ntest.afterEach.always(async () => {\n  await Tweet.deleteMany().exec()\n})\n\ntest.after(async () => {\n  await mongod.stop()\n})\n\n// POST /timeline\ntest.serial('get timeline', async t => {\n  const res = await supertest(app)\n    .post('/timeline')\n    .send([user1Id.toString(), user2Id.toString()])\n  t.is(res.status, 200)\n  t.is(res.body.length, 4)\n})\n"]}